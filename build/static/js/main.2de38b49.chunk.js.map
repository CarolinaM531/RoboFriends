{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"oOAeeA,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAE3B,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAA3B,cACrB,6BACC,4BAAKF,GACL,2BAAIC,MCSOK,EAfE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACC,iCAAQA,EAAOC,KAAK,SAACC,EAAMC,GAC1B,OAAQ,kBAAC,EAAD,CACRC,IAAOD,EACPR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCGLW,EAXG,SAAC,GAAiC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aACjC,OACC,yBAAKX,UAAW,OACf,2BACCA,UAAW,mCACXY,KAAM,SACNC,YAAc,gBACdC,SAAYH,MCCDI,EARA,SAACC,GACf,OACC,yBAAKC,MAAQ,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAO,UACnEJ,EAAMK,WC6CKC,G,wDA1Cd,aAAe,IAAD,8BACb,gBAaDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAb1C,EAAKC,MAAQ,CACZxB,OAAQ,GACRM,YAAa,IAJD,E,gEAQM,IAAD,OAClBmB,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAAErB,OAAQ6B,S,+BAO/B,IAAD,EACwBC,KAAKN,MAA7BxB,EADA,EACAA,OAAQM,EADR,EACQA,YAEVyB,EAAiB/B,EAAOgC,QAAO,SAAAC,GACpC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS7B,EAAY4B,kBAMrD,OAAQlC,EAAOoC,OAGd,yBAAKxC,UAAY,MAChB,wBAAIA,UAAY,MAAhB,eACA,kBAAC,EAAD,CAAWW,aAAeuB,KAAKX,iBAC/B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUnB,OAAU+B,MANvB,2C,GA9BeM,cCAZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTnB,MAAK,SAAAwB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5B,QACfuB,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,MC3EjEC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDCjC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,GAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,GAAN,sBAEP7B,IAgEV,SAAiCO,EAAOC,GAEtCrB,MAAMoB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5B7C,MAAK,SAAAC,GAEJ,IAAM6C,EAAc7C,EAAS4C,QAAQE,IAAI,gBAEnB,MAApB9C,EAAS+C,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAMlD,MAAK,SAAAwB,GACjCA,EAAa2B,aAAanD,MAAK,WAC7Bc,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IACN,oEAvFAsB,CAAwBlC,GAIxBE,UAAUC,cAAc4B,MAAMlD,MAAK,WACjC8B,QAAQC,IACN,iHAMJb,EAAgBC,OC5BxBmC,I","file":"static/js/main.2de38b49.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n//Needs to accept a paramenter of props which can be descructure furthur to (name, email id)\n\treturn (  \n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src= {`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2> \n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({\trobots }) => {\n\treturn (\n\t\t<div> { robots.map ((user ,i) => {\n\t\t\treturn (<Card \n\t\t\tkey = {i}\n\t\t\tid={robots[i].id} \n\t\t\tname={robots[i].name} \n\t\t\temail={robots[i].email}/>\n\t\t\t\t);\n\t\t\t})\n\t\t}\t\n\t\t</div>\n\t);\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange}) => {\n\treturn (\n\t\t<div className= 'pa2'>\n\t\t\t<input \n\t\t\t\tclassName= 'pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype= 'search'\n\t\t\t\tplaceholder = 'search robots'\n\t\t\t\tonChange= { searchChange} />\n\t\t</div>\n\t);\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style ={{ overflow: 'scroll', border: '5px solid black', height:'800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components//Scroll';\nimport './App.css';\n//import { robots } from './robots';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t};\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => response.json())\n\t\t\t.then(users => this.setState({ robots: users}));\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value })\n\t}\n\n\trender() {\n\t\tconst { robots, searchfield } = this.state \n\t\t//Now that you desctructured you can remove this.state from below code \n\t\tconst filteredRobots = robots.filter(robot =>{\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t})\n\t\t//if we can a ton of users and wanted to control length of users  ad if/else statement\n\t\t//instead of === 0 your can use ! to read it false in JS\n\t\t//You can also remove if/else statement by using ternary ?\n\t\t\t//The conditional (ternary) operator is the only JS operator that takes three operands: a condition followed by a question mark ( ? ), then an expression to execute if the condition is truthy followed by a colon ( : ), and finally the expression to execute if the condition is falsy\n\t\t\treturn !robots.length ?\n\t\t\t<h1>Loading</h1> :\n\t\t\t(\n\t\t\t\t<div className = 'tc'>\n\t\t\t\t\t<h1 className = 'f1'>RoboFriends</h1>\n\t\t\t\t\t<SearchBox searchChange ={this.onSearchChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<CardList robots = {filteredRobots} />\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl,);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl,);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\n//import CardList from './CardList'; replaced with App component\n\n//import { robots } from './robots'; moved to App.js\n// if you get 'robots' is defines but never used error then you have to descrcture it because it's not exported default like card\n// import Card from './Card';\n//import * as serviceWorker from './ServiceWorker';\n\n\n// ReactDom.renger(<App />, document.getElementById('root'));\n//Making the card component \nReactDOM.render(<App/>, document.getElementById('root'));\nregisterServiceWorker();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n\n"],"sourceRoot":""}